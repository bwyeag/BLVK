#include "bl_vkresult.hpp"

#include <unordered_map>
namespace BL {
namespace _vkresult {
using Enum = VulkanErrorEnum;
static constexpr std::unordered_map<VulkanErrorEnum, const char*> vk_resultmap{
    {Enum::VK_SUCCESS, "No error"},
    {Enum::VK_NOT_READY, "VK_NOT_READY"},
    {Enum::VK_TIMEOUT, "VK_TIMEOUT"},
    {Enum::VK_EVENT_SET, "VK_EVENT_SET"},
    {Enum::VK_EVENT_RESET, "VK_EVENT_RESET"},
    {Enum::VK_INCOMPLETE, "VK_INCOMPLETE"},
    {Enum::VK_ERROR_OUT_OF_HOST_MEMORY, "VK_ERROR_OUT_OF_HOST_MEMORY"},
    {Enum::VK_ERROR_OUT_OF_DEVICE_MEMORY, "VK_ERROR_OUT_OF_DEVICE_MEMORY"},
    {Enum::VK_ERROR_INITIALIZATION_FAILED, "VK_ERROR_INITIALIZATION_FAILED"},
    {Enum::VK_ERROR_DEVICE_LOST, "VK_ERROR_DEVICE_LOST"},
    {Enum::VK_ERROR_MEMORY_MAP_FAILED, "VK_ERROR_MEMORY_MAP_FAILED"},
    {Enum::VK_ERROR_LAYER_NOT_PRESENT, "VK_ERROR_LAYER_NOT_PRESENT"},
    {Enum::VK_ERROR_EXTENSION_NOT_PRESENT, "VK_ERROR_EXTENSION_NOT_PRESENT"},
    {Enum::VK_ERROR_FEATURE_NOT_PRESENT, "VK_ERROR_FEATURE_NOT_PRESENT"},
    {Enum::VK_ERROR_INCOMPATIBLE_DRIVER, "VK_ERROR_INCOMPATIBLE_DRIVER"},
    {Enum::VK_ERROR_TOO_MANY_OBJECTS, "VK_ERROR_TOO_MANY_OBJECTS"},
    {Enum::VK_ERROR_FORMAT_NOT_SUPPORTED, "VK_ERROR_FORMAT_NOT_SUPPORTED"},
    {Enum::VK_ERROR_FRAGMENTED_POOL, "VK_ERROR_FRAGMENTED_POOL"},
    {Enum::VK_ERROR_UNKNOWN, "VK_ERROR_UNKNOWN"},
    {Enum::VK_ERROR_OUT_OF_POOL_MEMORY, "VK_ERROR_OUT_OF_POOL_MEMORY"},
    {Enum::VK_ERROR_INVALID_EXTERNAL_HANDLE,
     "VK_ERROR_INVALID_EXTERNAL_HANDLE"},
    {Enum::VK_ERROR_FRAGMENTATION, "VK_ERROR_FRAGMENTATION"},
    {Enum::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
     "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"},
    {Enum::VK_PIPELINE_COMPILE_REQUIRED, "VK_PIPELINE_COMPILE_REQUIRED"},
    {Enum::VK_ERROR_SURFACE_LOST_KHR, "VK_ERROR_SURFACE_LOST_KHR"},
    {Enum::VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
     "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"},
    {Enum::VK_SUBOPTIMAL_KHR, "VK_SUBOPTIMAL_KHR"},
    {Enum::VK_ERROR_OUT_OF_DATE_KHR, "VK_ERROR_OUT_OF_DATE_KHR"},
    {Enum::VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
     "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"},
    {Enum::VK_ERROR_VALIDATION_FAILED_EXT, "VK_ERROR_VALIDATION_FAILED_EXT"},
    {Enum::VK_ERROR_INVALID_SHADER_NV, "VK_ERROR_INVALID_SHADER_NV"},
    {Enum::VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR,
     "VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR"},
    {Enum::VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR,
     "VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR"},
    {Enum::VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR,
     "VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR"},
    {Enum::VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR,
     "VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR"},
    {Enum::VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR,
     "VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"},
    {Enum::VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR,
     "VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR"},
    {Enum::VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,
     "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"},
    {Enum::VK_ERROR_NOT_PERMITTED_KHR, "VK_ERROR_NOT_PERMITTED_KHR"},
    {Enum::VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT,
     "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"},
    {Enum::VK_THREAD_IDLE_KHR, "VK_THREAD_IDLE_KHR"},
    {Enum::VK_THREAD_DONE_KHR, "VK_THREAD_DONE_KHR"},
    {Enum::VK_OPERATION_DEFERRED_KHR, "VK_OPERATION_DEFERRED_KHR"},
    {Enum::VK_OPERATION_NOT_DEFERRED_KHR, "VK_OPERATION_NOT_DEFERRED_KHR"},
    {Enum::VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR,
     "VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR"},
    {Enum::VK_ERROR_COMPRESSION_EXHAUSTED_EXT,
     "VK_ERROR_COMPRESSION_EXHAUSTED_EXT"},
    {Enum::VK_INCOMPATIBLE_SHADER_BINARY_EXT,
     "VK_INCOMPATIBLE_SHADER_BINARY_EXT"},
    {Enum::VK_RESULT_MAX_ENUM, "VK_RESULT_MAX_ENUM"}
};
};  // namespace _vkresult
std::string VulkanErrorCategory::message(int ev) const {
    if (auto p = _vkresult::vk_resultmap.find(static_cast<VulkanErrorEnum>(ev));
        p != _vkresult::vk_resultmap.end())
        return p->second;
    else
        return "unknown error";
}
static VulkanErrorCategory category;
[[nodiscard]]
std::error_code make_error_code(VulkanErrorEnum e) {
    return {static_cast<int>(e), category};
}
}  // namespace BL